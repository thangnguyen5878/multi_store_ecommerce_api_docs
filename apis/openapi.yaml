openapi: 3.0.0
info:
  title: Multi Store E-Commerce API
  description: API documentation for the multi-store e-commerce platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@multi-store-ecommerce.com

servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Authentication
    description: User authentication operations
  - name: Categories
    description: Category management
  - name: Subcategories
    description: Subcategory management
  - name: Products
    description: Product management
  - name: Orders
    description: Order management
  - name: Banners
    description: Banner management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          example: "$2a$08$kGAOm.hkT0LbVo3y4jSdz.5t"
        address:
          type: string
          example: "123 Main St"
        type:
          type: string
          default: "user"
          example: "user"
    
    Category:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c86"
        name:
          type: string
          example: "Electronics"
        image:
          type: string
          example: "https://example.com/images/electronics.jpg"
        banner:
          type: string
          example: "https://example.com/images/electronics-banner.jpg"
    
    SubCategory:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c87"
        categoryId:
          type: string
          example: "60d21b4667d0d8992e610c86"
        categoryName:
          type: string
          example: "Electronics"
        image:
          type: string
          example: "https://example.com/images/smartphones.jpg"
        subcategoryName:
          type: string
          example: "Smartphones"
    
    Product:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c88"
        productName:
          type: string
          example: "iPhone 13"
        productPrice:
          type: number
          example: 999.99
        discount:
          type: number
          example: 10
        quantity:
          type: number
          example: 50
        description:
          type: string
          example: "The latest iPhone with amazing features"
        category:
          type: string
          example: "Electronics"
        images:
          type: array
          items:
            type: string
          example: ["https://example.com/images/iphone13_1.jpg", "https://example.com/images/iphone13_2.jpg"]
        popular:
          type: boolean
          example: true
        recommed:
          type: boolean
          example: true
    
    Order:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c89"
        name:
          type: string
          example: "John Doe"
        productName:
          type: string
          example: "iPhone 13"
        productPrice:
          type: number
          example: 999.99
        discount:
          type: number
          example: 10
        quantity:
          type: number
          example: 1
        category:
          type: string
          example: "Electronics"
        image:
          type: string
          example: "https://example.com/images/iphone13_1.jpg"
        buyerId:
          type: string
          example: "60d21b4667d0d8992e610c85"
        vendorId:
          type: string
          example: "60d21b4667d0d8992e610c85"
        createdAt:
          type: number
          example: 1644345678
        accepted:
          type: boolean
          example: false
    
    Banner:
      type: object
      properties:
        _id:
          type: string
          example: "60d21b4667d0d8992e610c90"
        image:
          type: string
          example: "https://example.com/images/banner1.jpg"
    
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message description"
        msg:
          type: string
          example: "User-friendly error message"

paths:
  /api/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "user with same email already exits"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/signin:
    post:
      tags:
        - Authentication
      summary: Sign in to user account
      description: Authenticate user and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not found with this email"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/signout:
    post:
      tags:
        - Authentication
      summary: Sign out from user account
      description: End user session and invalidate token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sign out successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User successfully signed out"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No auth token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokenIsValid:
    post:
      tags:
        - Authentication
      summary: Validate token
      description: Check if the provided token is valid
      parameters:
        - in: header
          name: x-auth-token
          schema:
            type: string
          required: true
          description: The JWT token
      responses:
        '200':
          description: Returns token validity
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /:
    get:
      tags:
        - Authentication
      summary: Get user data
      description: Retrieve authenticated user's information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No auth token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/categories:
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Add a new product category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - image
                - banner
              properties:
                name:
                  type: string
                  example: "Electronics"
                image:
                  type: string
                  example: "https://example.com/images/electronics.jpg"
                banner:
                  type: string
                  example: "https://example.com/images/electronics-banner.jpg"
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve a list of all product categories
      responses:
        '200':
          description: List of categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/subcategory:
    post:
      tags:
        - Subcategories
      summary: Create a new subcategory
      description: Add a new product subcategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categoryId
                - categoryName
                - image
                - subcategoryName
              properties:
                categoryId:
                  type: string
                  example: "60d21b4667d0d8992e610c86"
                categoryName:
                  type: string
                  example: "Electronics"
                image:
                  type: string
                  example: "https://example.com/images/smartphones.jpg"
                subcategoryName:
                  type: string
                  example: "Smartphones"
      responses:
        '201':
          description: Subcategory created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/category/{categoryName}/subcategories:
    get:
      tags:
        - Subcategories
      summary: Get subcategories by category name
      description: Retrieve all subcategories for a given category
      parameters:
        - in: path
          name: categoryName
          schema:
            type: string
          required: true
          description: Category name
          example: "Electronics"
      responses:
        '200':
          description: Subcategories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubCategory'
        '404':
          description: Subcategories not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subcategories not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /post/add-product:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productName
                - productPrice
                - discount
                - quantity
                - description
                - category
                - images
              properties:
                productName:
                  type: string
                  example: "iPhone 13"
                productPrice:
                  type: number
                  example: 999.99
                discount:
                  type: number
                  example: 10
                quantity:
                  type: number
                  example: 50
                description:
                  type: string
                  example: "The latest iPhone with amazing features"
                category:
                  type: string
                  example: "Electronics"
                images:
                  type: array
                  items:
                    type: string
                  example: ["https://example.com/images/iphone13_1.jpg", "https://example.com/images/iphone13_2.jpg"]
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/products:
    get:
      tags:
        - Products
      summary: Get popular products
      description: Retrieve a list of all popular products
      responses:
        '200':
          description: List of popular products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /category/products:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Retrieve products filtered by category
      parameters:
        - in: query
          name: category
          schema:
            type: string
          required: false
          description: Category name filter
          example: "Electronics"
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/recommended-products:
    get:
      tags:
        - Products
      summary: Get recommended products
      description: Retrieve a list of recommended products
      responses:
        '200':
          description: List of recommended products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Place a new product order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - productName
                - productPrice
                - discount
                - quantity
                - category
                - image
              properties:
                name:
                  type: string
                  example: "John Doe"
                productName:
                  type: string
                  example: "iPhone 13"
                productPrice:
                  type: number
                  example: 999.99
                discount:
                  type: number
                  example: 10
                quantity:
                  type: number
                  example: 1
                category:
                  type: string
                  example: "Electronics"
                image:
                  type: string
                  example: "https://example.com/images/iphone13_1.jpg"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No auth token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve a list of orders placed by the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No auth token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/banner:
    post:
      tags:
        - Banners
      summary: Create a new banner
      description: Add a new promotional banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  example: "https://example.com/images/banner1.jpg"
      responses:
        '200':
          description: Banner created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags:
        - Banners
      summary: Get all banners
      description: Retrieve a list of all promotional banners
      responses:
        '200':
          description: Banners retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Banner'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
